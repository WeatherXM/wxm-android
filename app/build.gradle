plugins {
    id "com.android.application"
    id "kotlin-android"
    id "kotlin-kapt"
    id "kotlin-parcelize"
    id "com.google.gms.google-services"
    id "com.google.firebase.crashlytics"
    id "com.google.firebase.appdistribution"
    id "com.google.firebase.firebase-perf"
}

def getGitCommitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine "git", "rev-parse", "--short", "HEAD"
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

android {
    compileSdkVersion 32
    buildToolsVersion "31.0.0"

    defaultConfig {
        applicationId "com.weatherxm.app"
        minSdkVersion 23
        targetSdkVersion 32
        versionCode 14
        versionName "3.1.2"

        // Resource value fields
        resValue("string", "mapbox_access_token", "$MAPBOX_ACCESS_TOKEN")
    }

    signingConfigs {
        release {
            storeFile file("${rootDir.path}/$RELEASE_KEYSTORE")
            storePassword "$RELEASE_KEYSTORE_PASSWORD"
            keyAlias "$RELEASE_KEY_ALIAS"
            keyPassword "$RELEASE_KEY_PASSWORD"
        }
    }

    flavorDimensions "mode", "server"

    productFlavors {
        local {
            dimension "mode"
        }
        remote {
            dimension "mode"
        }
        mock {
            dimension "server"
            applicationIdSuffix ".mock"
            resValue "string", "app_name", "WXM Mock"
            buildConfigField("String", "API_URL", "\"https://api-dev.weatherxm.com\"")
            buildConfigField("String", "AUTH_URL", "\"https://api-dev.weatherxm.com\"")
        }
        staging {
            dimension "server"
            applicationIdSuffix ".staging"
            resValue "string", "app_name", "WXM Staging"
            buildConfigField("String", "API_URL", "\"https://api-staging.weatherxm.com\"")
            buildConfigField("String", "AUTH_URL", "\"https://api-staging.weatherxm.com\"")
        }
        dev {
            dimension "server"
            applicationIdSuffix ".dev"
            resValue "string", "app_name", "WXM Dev"
            buildConfigField("String", "API_URL", "\"https://api-dev.weatherxm.com\"")
            buildConfigField("String", "AUTH_URL", "\"https://api-dev.weatherxm.com\"")
            firebaseAppDistribution {
                artifactType = "APK"
                releaseNotes = "Release notes for development version"
                serviceCredentialsFile = "${rootDir.path}/ci-service-account.json"
                groups = "$FIREBASE_INTERNAL_TEST_GROUP"
            }
        }
        prod {
            dimension "server"
            resValue "string", "app_name", "WeatherXM"
            buildConfigField("String", "API_URL", "\"https://api.weatherxm.com\"")
            buildConfigField("String", "AUTH_URL", "\"https://api.weatherxm.com\"")
            firebaseAppDistribution {
                artifactType = "APK"
                releaseNotes = "Release notes for production version"
                serviceCredentialsFile = "${rootDir.path}/ci-service-account.json"
                groups = "$FIREBASE_PUBLIC_TEST_GROUP"
            }
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
            manifestPlaceholders = [crashlyticsEnabled:"true"]
        }
        debug {
            // Change minifyEnabled to true if you want to test code obfuscation in debug mode
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
            manifestPlaceholders = [crashlyticsEnabled:"false"]
        }
    }

    buildFeatures {
        viewBinding true
    }

    // Filter out specific build variants
    variantFilter { variant ->
        def names = variant.flavors*.name
        if (names.contains("local") && !names.contains("mock")) {
            variant.setIgnore(true)
        } else if (names.contains("remote") && names.contains("mock")) {
            variant.setIgnore(true)
        } else if (variant.buildType.name != "debug" && names.contains("mock")) {
            variant.setIgnore(true)
        }
    }

    // Flavor-specific version name & apk file name, also
    applicationVariants.all { variant ->
        // Base version
        def version = "${variant.getVersionName()}-$getGitCommitHash"

        // Add flavor in version, if mock or dev
        def flavor = variant.getFlavorName().toLowerCase()
        if (flavor.contains("mock")) {
            version = "$version-mock"
        } else if (flavor.contains("dev")) {
            version = "$version-development"
        }

        // Add debug build type in version
        if (variant.buildType.name.contains("debug")) {
            version = "$version-${variant.buildType.name}"
        }

        // Create app_version res string
        variant.resValue "string", "app_version", "$version"

        // Proper apk file name
        variant.outputs.all { output ->
            output.versionNameOverride = version
            outputFileName = "weatherxm-${version}.apk"
        }

        // Delete mock files on release APK flavor
        if (variant.buildType.name.contains("release")) {
            variant.mergeAssetsProvider.get().doLast {
                delete(fileTree(dir: variant.mergeAssetsProvider.get().outputDir, includes: ["**/mock/*"]))
            }
        }
    }

    compileOptions {
        // Enable support for the new language APIs
        coreLibraryDesugaringEnabled true

        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    packagingOptions {
        jniLibs {
            excludes += ["META-INF/*"]
        }
        resources {
            excludes += ["META-INF/*"]
        }
    }

    kotlinOptions {
        jvmTarget = "11"
    }

    lint {
        abortOnError false
    }
}

repositories {
    maven { url "https://jitpack.io" }
}

dependencies {
    // Desugaring for Java8 feature support
    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:1.1.5"

    // Android Jetpack libraries
    implementation "androidx.activity:activity-ktx:1.4.0"
    implementation "androidx.annotation:annotation:1.3.0"
    implementation "androidx.appcompat:appcompat:1.4.1"
    implementation "androidx.browser:browser:1.4.0"
    implementation "androidx.collection:collection-ktx:1.2.0"
    implementation "androidx.constraintlayout:constraintlayout:2.1.3"
    implementation "androidx.core:core-ktx:1.7.0"
    implementation "androidx.fragment:fragment-ktx:1.4.1"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.4.1"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.4.1"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.1"
    implementation "androidx.navigation:navigation-fragment-ktx:2.4.2"
    implementation "androidx.navigation:navigation-ui-ktx:2.4.2"
    implementation "androidx.paging:paging-runtime-ktx:3.1.1"
    implementation "androidx.preference:preference-ktx:1.2.0"
    implementation "androidx.recyclerview:recyclerview-selection:1.1.0"
    implementation "androidx.security:security-crypto:1.0.0"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"
    implementation "androidx.viewpager2:viewpager2:1.0.0"

    // Material Components for Android
    implementation "com.google.android.material:material:1.6.0"

    // Google Play Services for Location & Maps
    implementation "com.google.android.gms:play-services-location:19.0.1"

    // Logging
    implementation "com.jakewharton.timber:timber:5.0.1"

    // JSON serialization/deserialization
    implementation "com.squareup.moshi:moshi:1.13.0"
    implementation "com.squareup.moshi:moshi-adapters:1.13.0"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:1.13.0"

    // HTTP client
    implementation "com.squareup.retrofit2:retrofit:2.9.0"
    implementation "com.squareup.retrofit2:converter-moshi:2.9.0"

    implementation platform("com.squareup.okhttp3:okhttp-bom:4.9.3")
    implementation "com.squareup.okhttp3:okhttp"
    implementation "com.squareup.okhttp3:logging-interceptor"

    // Network response wrapper
    implementation "com.github.haroldadmin:NetworkResponseAdapter:5.0.0"

    // JWT auth utilities
    implementation "com.auth0.android:jwtdecode:2.0.1"

    // Animations
    implementation "com.airbnb.android:lottie:5.1.1"

    // Charts
    implementation "com.github.PhilJay:MPAndroidChart:v3.1.0"
    implementation "com.diogobernardino:williamchart:3.11.0"

    // Permissions
    implementation "com.github.fondesa:kpermissions:3.3.0"

    // Dependency Injection
    implementation "io.insert-koin:koin-android:3.1.6"

    // Data types and more
    implementation platform("io.arrow-kt:arrow-stack:1.1.2")
    implementation "io.arrow-kt:arrow-core"
    implementation "io.arrow-kt:arrow-fx-coroutines"

    // Mapbox
    implementation "com.mapbox.maps:android:10.5.0"

    // Insetter
    implementation "dev.chrisbanes.insetter:insetter:0.6.1"

    // Import the Firebase BoM
    implementation platform("com.google.firebase:firebase-bom:29.3.1")
    implementation "com.google.firebase:firebase-crashlytics-ktx"
    implementation "com.google.firebase:firebase-perf-ktx"
    implementation "com.google.firebase:firebase-config-ktx"
    implementation "com.google.firebase:firebase-messaging-ktx"

    // QR Code Scanner
    implementation "com.journeyapps:zxing-android-embedded:4.3.0"

    // Retromock for mocking responses
    implementation "co.infinum:retromock:1.1.1"

    // Input masking (for Serial Number input)
    implementation "com.github.RedMadRobot:input-mask-android:6.1.0"

    // Better link handling in text views
    implementation "me.saket:better-link-movement-method:2.2.0"

    // Page Indicator
    implementation "com.tbuonomo:dotsindicator:4.3"
}
